AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: demo data integration template

Parameters:

  # Storage
  RawBucketName:
    Type: String
    Description: S3 bucket for ingesting the raw HL7 messages

  StagingBucketName:
    Type: String
    Description: S3 bucket for staging the JSON data files

  # Lambda
  Hl7ToJsonFunctionName:
    Type: String
    Description: Lambda function for transforming HL7 to JSON

  # Lambda Layers
  LibraryBucketName:
    Type: String
    Description: S3 bucket containing hl7apy library

  LibraryKey:
    Type: String
    Description: S3 key of the hl7apy library (zip) file

  JsonDataConsumerUserName:
    Type: String
    Description: IAM user that reads JSON records from the staging S3 bucket

  # IAM Policies
  RawBucketIngestPolicyName:
    Type: String
    Description: Policy that allows write access to the raw S3 bucket

  StagingBucketCopyPolicyName:
    Type: String
    Description: Policy that allows read and delete access to the staging S3 bucket

  # SNS
  ErrorTopicName:
    Type: String
    Description: SNS topic for Lambda function error notifications

  AlertEmailAddress:
    Type: String
    Description: Email address for receiving alert notifications

  # CloudWatch
  CloudWatchAlarmName:
    Type: String
    Description: Cloudwatch alarm for detecting Lambda function errors and publishing to SNS

Resources:

  # S3 bucket for ingesting the raw HL7
  RawBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref RawBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  # S3 bucket for staging the JSON data files
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref StagingBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  # Contains library and runtime code for the Lambda function
  Hl7ParserLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: hl7apy
      CompatibleRuntimes:
        - python2.7
        - python3.6
        - python3.7
        - python3.8
      ContentUri:
        Bucket: !Ref LibraryBucketName
        Key: !Ref LibraryKey
      Description: Lightweight Python package used for parsing of HL7 v2 messages
      LicenseInfo: MIT

  # Lambda function for transforming the HL7
  Hl7ParserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref Hl7ToJsonFunctionName
      Runtime: python3.8
      Handler: hl7Parser.lambda_handler
      MemorySize: 256
      Timeout: 30
      Layers:
        - !Ref Hl7ParserLayer
      Events:
        Hl7UploadEvent:
          Type: S3
          Properties:
            Bucket: !Ref RawBucket
            Events: s3:ObjectCreated:*
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucketName
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref RawBucketName
        - S3WritePolicy:
            BucketName: !Ref StagingBucketName


  # S3 permission to call the Lambda function on upload of HL7
  AllowRawBucketToCallHl7Parser:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref Hl7ParserFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt RawBucket.Arn

  # Policy allowing the data provider access to upload HL7 to the raw S3 bucket
  RawBucketIngestHl7Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref RawBucketIngestPolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !GetAtt RawBucket.Arn
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
            Resource: !Sub ${RawBucket.Arn}/*


  # Policy allowing the data consumer access to read and delete JSON files from the staging S3 bucket
  StagingBucketCopyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Ref StagingBucketCopyPolicyName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: s3:ListBucket
            Resource: !GetAtt StagingBucket.Arn
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
            Resource: !Sub ${StagingBucket.Arn}/*
      Users:
        - !Ref JsonDataConsumerUserName

  # SNS topic for Hl7ToJson errors, with an email subscriber for receiving alerts
  SnsTopicCloudWatchAlarm:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref ErrorTopicName
      DisplayName: HL7 to JSON error notifications
      Subscription:
        - Endpoint: !Ref AlertEmailAddress
          Protocol: email

  # CloudWatch alarm that publishes to SNS if the Hl7ToJson error count is greater than 0 over a 5 minute period
  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Ref CloudWatchAlarmName
      AlarmActions:
        - !Ref SnsTopicCloudWatchAlarm
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 1
      Threshold: 0
      DatapointsToAlarm: 1
      Period: 300
      Namespace: AWS/Lambda
      MetricName: Errors
      Statistic: Sum
      Dimensions:
        - Name: FunctionName
          Value: !Ref Hl7ToJsonFunctionName